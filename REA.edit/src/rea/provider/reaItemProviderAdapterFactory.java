/**
 */
package rea.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import rea.util.reaAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class reaItemProviderAdapterFactory extends reaAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public reaItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link rea.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link rea.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.Agent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentItemProvider agentItemProvider;

	/**
	 * This creates an adapter for a {@link rea.Agent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentAdapter() {
		if (agentItemProvider == null) {
			agentItemProvider = new AgentItemProvider(this);
		}

		return agentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.Exchange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExchangeItemProvider exchangeItemProvider;

	/**
	 * This creates an adapter for a {@link rea.Exchange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExchangeAdapter() {
		if (exchangeItemProvider == null) {
			exchangeItemProvider = new ExchangeItemProvider(this);
		}

		return exchangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.Conversion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConversionItemProvider conversionItemProvider;

	/**
	 * This creates an adapter for a {@link rea.Conversion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConversionAdapter() {
		if (conversionItemProvider == null) {
			conversionItemProvider = new ConversionItemProvider(this);
		}

		return conversionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link rea.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.BusinessProcessDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessProcessDefinitionItemProvider businessProcessDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link rea.BusinessProcessDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessProcessDefinitionAdapter() {
		if (businessProcessDefinitionItemProvider == null) {
			businessProcessDefinitionItemProvider = new BusinessProcessDefinitionItemProvider(this);
		}

		return businessProcessDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.Right} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RightItemProvider rightItemProvider;

	/**
	 * This creates an adapter for a {@link rea.Right}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRightAdapter() {
		if (rightItemProvider == null) {
			rightItemProvider = new RightItemProvider(this);
		}

		return rightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.RightTransfer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RightTransferItemProvider rightTransferItemProvider;

	/**
	 * This creates an adapter for a {@link rea.RightTransfer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRightTransferAdapter() {
		if (rightTransferItemProvider == null) {
			rightTransferItemProvider = new RightTransferItemProvider(this);
		}

		return rightTransferItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.PropertyAlteration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyAlterationItemProvider propertyAlterationItemProvider;

	/**
	 * This creates an adapter for a {@link rea.PropertyAlteration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAlterationAdapter() {
		if (propertyAlterationItemProvider == null) {
			propertyAlterationItemProvider = new PropertyAlterationItemProvider(this);
		}

		return propertyAlterationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.ValueModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueModelItemProvider valueModelItemProvider;

	/**
	 * This creates an adapter for a {@link rea.ValueModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueModelAdapter() {
		if (valueModelItemProvider == null) {
			valueModelItemProvider = new ValueModelItemProvider(this);
		}

		return valueModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.BusinessProcessInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessProcessInstanceItemProvider businessProcessInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link rea.BusinessProcessInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessProcessInstanceAdapter() {
		if (businessProcessInstanceItemProvider == null) {
			businessProcessInstanceItemProvider = new BusinessProcessInstanceItemProvider(this);
		}

		return businessProcessInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.EventInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventInstanceItemProvider eventInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link rea.EventInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventInstanceAdapter() {
		if (eventInstanceItemProvider == null) {
			eventInstanceItemProvider = new EventInstanceItemProvider(this);
		}

		return eventInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.ResourceInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceInstanceItemProvider resourceInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link rea.ResourceInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceInstanceAdapter() {
		if (resourceInstanceItemProvider == null) {
			resourceInstanceItemProvider = new ResourceInstanceItemProvider(this);
		}

		return resourceInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.PropertyInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyInstanceItemProvider propertyInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link rea.PropertyInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyInstanceAdapter() {
		if (propertyInstanceItemProvider == null) {
			propertyInstanceItemProvider = new PropertyInstanceItemProvider(this);
		}

		return propertyInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.RightInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RightInstanceItemProvider rightInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link rea.RightInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRightInstanceAdapter() {
		if (rightInstanceItemProvider == null) {
			rightInstanceItemProvider = new RightInstanceItemProvider(this);
		}

		return rightInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.Claim} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClaimItemProvider claimItemProvider;

	/**
	 * This creates an adapter for a {@link rea.Claim}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClaimAdapter() {
		if (claimItemProvider == null) {
			claimItemProvider = new ClaimItemProvider(this);
		}

		return claimItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link rea.AgentAlias} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AgentAliasItemProvider agentAliasItemProvider;

	/**
	 * This creates an adapter for a {@link rea.AgentAlias}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAgentAliasAdapter() {
		if (agentAliasItemProvider == null) {
			agentAliasItemProvider = new AgentAliasItemProvider(this);
		}

		return agentAliasItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (agentItemProvider != null) agentItemProvider.dispose();
		if (exchangeItemProvider != null) exchangeItemProvider.dispose();
		if (conversionItemProvider != null) conversionItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (businessProcessDefinitionItemProvider != null) businessProcessDefinitionItemProvider.dispose();
		if (rightItemProvider != null) rightItemProvider.dispose();
		if (rightTransferItemProvider != null) rightTransferItemProvider.dispose();
		if (propertyAlterationItemProvider != null) propertyAlterationItemProvider.dispose();
		if (valueModelItemProvider != null) valueModelItemProvider.dispose();
		if (businessProcessInstanceItemProvider != null) businessProcessInstanceItemProvider.dispose();
		if (eventInstanceItemProvider != null) eventInstanceItemProvider.dispose();
		if (resourceInstanceItemProvider != null) resourceInstanceItemProvider.dispose();
		if (propertyInstanceItemProvider != null) propertyInstanceItemProvider.dispose();
		if (rightInstanceItemProvider != null) rightInstanceItemProvider.dispose();
		if (claimItemProvider != null) claimItemProvider.dispose();
		if (agentAliasItemProvider != null) agentAliasItemProvider.dispose();
	}

}
